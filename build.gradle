plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'application'
	id 'org.liquibase.gradle' version '2.2.0'
	id "com.github.johnrengelman.processes" version "0.5.0"
	id "org.springdoc.openapi-gradle-plugin" version "1.6.0"
	id 'org.siouan.frontend-jdk11' version '6.0.0'
	id 'checkstyle'
}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'

java {
	sourceCompatibility = '20'
}

compileJava {
	options.release = 20
	options.encoding = 'UTF-8'
}

wrapper {
	gradleVersion = '8.3'
	distributionType = Wrapper.DistributionType.ALL
}

application {
	mainClass = 'hexlet.code.AppApplication'
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

def jjwtversion = '0.11.5'

dependencies {

	// Spring Boot dependencies
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.data:spring-data-jpa:3.1.4'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

	// Lombok dependencies
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// Tests dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// implementation 'org.springframework.security:spring-security-test'

	// Liquibase dependencies and JDBC drivers for H2 and PostgresSQL databases
	implementation 'org.liquibase:liquibase-core'
	implementation 'org.postgresql:postgresql:42.6.0'
	implementation 'com.h2database:h2:2.2.222'

	// Mappers and mapstruct
	implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	// Swagger
	implementation 'io.swagger.core.v3:swagger-annotations:2.2.15'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	// jjwt library for working with JWT
	implementation "io.jsonwebtoken:jjwt-api:${jjwtversion}"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtversion}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtversion}"

	// For creating initial data during development
	implementation 'net.datafaker:datafaker:2.0.1'

	implementation 'javax.xml.bind:jaxb-api:2.4.0-b180830.0359'

	liquibaseRuntime(
			sourceSets.main.output,
			'org.liquibase:liquibase-core',
			'info.picocli:picocli:4.7.1',
			'org.liquibase.ext:liquibase-hibernate6:4.21.1',
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'com.h2database:h2',
	)
}

tasks.named('test') {
	useJUnitPlatform()
}

diffChangelog {
	dependsOn compileJava
}

// Настраиваем Liquibase
liquibase {
	activities {
		main {
			// Указываем путь, по которому будет сгенерирован файл миграции
			changelogFile 'app/src/main/resources/db/changelog/db.changelog-master.yml'
			// Указываем источник, с которым будут сравниваться изменения
			// Это база данных, изначально она пустая
			url 'jdbc:h2:mem:default'
			// Имя пользователя и пароль для подключения к базе
			username 'sa'
			password 'sa'
			// Сравниваем с моделями, задавая пакет
			referenceUrl 'hibernate:spring:hexlet.code.model.' +
					// Указываем диалект
					'?dialect=org.hibernate.dialect.H2Dialect'
			// Указываем правила именования таблиц и столбцов,
			// чтобы они соответствовали правилам Spring
			'&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
		}
	}
}

task stage(dependsOn: [clean, installDist])
installDist.mustRunAfter clean

// Сборка фронтенда.
// Выполняется только если ничего не изменилось.
// *****************************************************************************
frontend {
	nodeVersion = '16.13.1'
	installScript = 'install'
	assembleScript = 'run build'
	packageJsonDirectory = file("${projectDir}/frontend")
}

def configFrontendTasks = {
	inputs.files(fileTree("$projectDir/frontend").exclude('build', 'node_modules'))
	outputs.dir("$buildDir/resources/main/static")
}

assembleFrontend {
	configure configFrontendTasks

	doLast {
		copy {
			from "$projectDir/frontend/build"
			into "$buildDir/resources/main/static"
		}
	}
}

installFrontend {
	configure configFrontendTasks
}

processResources.dependsOn assembleFrontend
// *****************************************************************************
